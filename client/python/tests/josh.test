#!/bin/sh
#specify MPO server address. The API will read this value.
#defaults are used if environment is not set

if ! [ -n "${MPO_HOME:+x}" ]
then
    echo MPO_HOME not defined, using relative path
    export MPO_HOME=$(dirname $0)/../../../
    echo using MPO_HOME = $MPO_HOME
fi

if ! [ -n "${MPO_HOST:+x}" ]
then
  export MPO_HOST=https://localhost
fi

if ! [ -n "${MPO_VERSION:+x}" ]
then
  export MPO_VERSION=v0
fi

if ! [ -n "${MPO:+x}" ]
then
  export MPO="$MPO_HOME/client/python/mpo_arg.py"
fi

if ! [ -n "${MPO_AUTH:+x}" ]
then
  export MPO_AUTH="$MPO_HOME/MPO Demo User.pem"
fi

shot=550335
#use API methods to create a workflow, exit if this fails. likely server is down.
wid=`$MPO init --name=EFIT --desc="A first EFIT workflow" --type=EFIT`
#check value, we use string comparison because UUID is a string
if [ "$wid" = "-1" ]
then
   echo Critical error, cannot create workflow. Check configuration and server status.
   exit
fi
   

echo wid is $wid
oid1=`$MPO add  $wid $wid --name=shot --desc="Plasma shot number" --uri=$shot`
echo oid1 is $oid1
uri=`$MPO --field=uri archive -p mdsplus -s $shot -t efit02 -p'\efit02:namelist'`
oid2=`$MPO add  $wid $wid --name="Snap file" --desc="EFIT input file" --uri=$uri`
echo oid2 is $oid2
oid3=`$MPO add  $wid $wid --uri="$($MPO --field=uri archive --name="Green's Table" --desc="Green's table files" -p filesys -f/link/efit/rpf[01-12].d3d)"`
echo oid3 is $oid3
aid1=`$MPO step $wid $oid1 --input=$oid2 --input=$oid3 --name="Read Input Files" --desc="Read shot number, snap file etc..."`
cid=`$MPO comment $aid1 "This program is the only one in this workflow"`

#Here we show that dataobject can be added by UID using default filter with the archive command instead of uri
oid4=`$MPO add  $wid $wid --uid="$($MPO archive --name="Plasma Current" --desc="Plasma current in MA" -p mdsplus -s $shot -t magnetics -p'\magnetics::ip')"`

oid5=`$MPO add  $wid $wid --name="PTDATA" --desc="Point Data" --uri="file://some/path/to/datafile"`
aid2=`$MPO step $wid $oid4 --input=$oid5 --name="Read PTDATA" --desc="Read PTDATA and Plasma Current" --uri=EFIT1`
aid3=`$MPO step $wid $aid2  --name="Calibrate Data" --desc="Calibrate input to EFIT" --uri=EFIT2`
aid4=`$MPO step $wid $aid3 --input $aid1 --name="EFIT Data averaging" --desc="Average EFIT Data" --uri=EFIT3`
aid5=`$MPO step $wid $aid4 --name="Run PTDATA" --desc="Run the EFIT code to FIT the equilibria" --uri=EFIT4`
aid6=`$MPO step $wid $aid5  --name="Write EFIT Outputs" --desc="Write the EFIT output files" --uri=EFIT5`

#You can get the uri separately if you like to simplify the queries
uri=`$MPO --field=uri archive --name="A File" --desc="A EQDSK File" -p mdsplus -s $shot -t efit01 -p'\efit01::results:aeqdsk'`
oid6=`$MPO add  $wid $aid6 --source $aid6 --uri=$uri`
oid7=`$MPO add  $wid $aid6 --source $aid6 --uri="$($MPO --field=uri archive --name="G File" --desc="G EQDSK File" -p mdsplus -s $shot -t efit01 -p'\efit01::results:geqdsk')"`
#aid7=`$MPO step $wid $oid6  --name="EFIT Complete" --desc="Should this be different than step?" --uri=EFIT6`

echo Josh test uids: $cid $aid4 $oid7
echo Last dataobject added is:
$MPO -f pretty search workflow/$wid/dataobject/$oid7
